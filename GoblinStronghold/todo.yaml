---
keepInMind:
    - Performance doesn't matter until it matters.
    - Have the performance be shit and do things this simple way
    - Excessive iterations to find objects
    - Just query through the context
---
- refactors:
    - can I get rid of the .Value.Content? Maybe what I really want to do is have Component be a kind of Option class
    - when we get all entites with components return as a dict rather than double lookups
- ecs:
    - basicSystems:
        - monster movement (random)
        - attacking
- adventureLog:
    - multifonts?
    - how do components interact to make fun and surprising messages?
- monsters:
    - bat
    - attacking
    - health
    - ai control
    - turns
- diceRolling:
    - parse dice strings
    - be able to log some of them out? or how good an attack was
- yamlEntityConfig:
    - iterate over folders
    - some sort of manifest as we will no longer know the class at runtime
    - look at data-oriented-design?
    - type object pattern?
    - some sort of way of defining animations or appearance pools
    - dice roll health?
- dungonGeneration:
    - something basic
    - look at tutorials
- input:
    - menus
    - keyboard control stack in manager
    - mouse control?
- fieldOfView:
    - check shadowcasting tutorials
    - gorogue source
    - lighting?
    - monster eyesight?
    - monster pathfinding
- globalConfig:
    - palletes
    - key bindings
- palletes:
    - 16 base colours? 32 base colours?
    - take background from cell or things on it like water or acid
    - take foreground from sprite
    - shading? dark + light maybe warm and cold? encode in an image?
- equipment:
    - swords
    - potions
- doors:
    - open and close!
    - not everyone can open
    - blocks sight